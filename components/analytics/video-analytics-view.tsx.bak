'use client'

import { useState, useEffect } from 'react'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card        title: "Export Successful",
        description: `Video analytics exported as ${format.toUpperCase()}`
      })
    } catch (error) {
      console.error('Export failed:', error)
      toast({
        title: "Export Failed",
        description: "Failed to export video analytics. Please try again.",
        variant: "destructive",
      })
    }
  }

  return (tton } from '@/components/ui/button'
import { Badge } from '@/components/ui/badge'
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs'
import { Progress } from '@/components/ui/progress'
import { 
  LineChart, 
  Line, 
  AreaChart, 
  Area, 
  XAxis, 
  YAxis, 
  CartesianGrid, 
  Tooltip, 
  ResponsiveContainer,
  BarChart,
  Bar,
  PieChart,
  Pie,
  Cell
} from 'recharts'
import { 
  Play, 
  Eye, 
  Clock, 
  ThumbsUp, 
  Share2, 
  TrendingUp, 
  Users, 
  MapPin,
  Calendar,
  Download
} from 'lucide-react'
import { useToast } from '@/hooks/use-toast'
import { analyticsAPI, videosAPI } from '@/lib/api'

interface VideoAnalytics {
  video: {
    id: string
    title: string
    description: string
    duration: number
    thumbnail_url: string
    uploaded_at: string
    status: string
  }
  metrics: {
    total_views: number
    unique_viewers: number
    total_watch_time: number
    average_view_duration: number
    completion_rate: number
    like_rate: number
    share_count: number
    comment_count: number
  }
  retention_data: Array<{
    timestamp: number
    percentage: number
    viewers: number
  }>
  heatmap_data: Array<{
    timestamp: number
    interactions: number
    rewatches: number
    skips: number
  }>
  demographics: {
    age_groups: Array<{ group: string, count: number }>
    geographic: Array<{ country: string, viewers: number }>
    devices: Array<{ device: string, count: number }>
  }
  performance_over_time: Array<{
    date: string
    views: number
    watch_time: number
    engagement: number
  }>
  top_moments: Array<{
    timestamp: number
    description: string
    engagement_score: number
  }>
}

interface VideoAnalyticsViewProps {
  videoId: string
}

export function VideoAnalyticsView({ videoId }: VideoAnalyticsViewProps) {
  const { toast } = useToast()
  const [analytics, setAnalytics] = useState<VideoAnalytics | null>(null)
  const [isLoading, setIsLoading] = useState(true)
  const [dateRange, setDateRange] = useState('30d')

  useEffect(() => {
    fetchAnalytics()
  }, [videoId, dateRange])

  const fetchAnalytics = async () => {
    try {
      setIsLoading(true)
      // Fetch video analytics from API
      const response = await analyticsAPI.getVideoAnalytics(videoId)
      setAnalytics(response)
    } catch (error) {
      console.error('Failed to fetch analytics:', error)
      toast({
        title: "Error",
        description: "Failed to load video analytics. Please try again.",
        variant: "destructive",
      })
    } finally {
      setIsLoading(false)
    }
  }

  const formatDuration = (seconds: number) => {
    const hours = Math.floor(seconds / 3600)
    const minutes = Math.floor((seconds % 3600) / 60)
    const remainingSeconds = seconds % 60
    
    if (hours > 0) {
      return `${hours}:${minutes.toString().padStart(2, '0')}:${remainingSeconds.toString().padStart(2, '0')}`
    }
    return `${minutes}:${remainingSeconds.toString().padStart(2, '0')}`
  }

  const formatNumber = (num: number) => {
    if (num >= 1000000) return `${(num / 1000000).toFixed(1)}M`
    if (num >= 1000) return `${(num / 1000).toFixed(1)}K`
    return num.toString()
  }

  const exportData = async (format: 'csv' | 'json') => {
    try {
      const response = await analyticsAPI.exportAnalytics({
        format,
        metrics: ['video_analytics'],
        date_range: dateRange
      })
      
      // Create download link
      const link = document.createElement('a')
      link.href = response.download_url
      link.download = `video-${videoId}-analytics.${format}`
      document.body.appendChild(link)
      link.click()
      document.body.removeChild(link)
      
      toast({
        title: "Export Successful",
        description: `Video analytics exported as ${format.toUpperCase()}`
      })
    } catch (error) {
      console.error('Export failed:', error)
      toast({
        title: "Export Failed",
        description: "Failed to export video analytics. Please try again.",
        variant: "destructive",
      })
    }
  }
      const a = document.createElement('a')
      a.href = url
      a.download = `video-analytics-${videoId}.${format}`
      a.click()
      window.URL.revokeObjectURL(url)
    } catch (error) {
      console.error('Failed to export data:', error)
    }
  }

  if (isLoading) {
    return (
      <div className="flex justify-center items-center min-h-[400px]">
        <LoadingSpinner size="lg" />
      </div>
    )
  }

  if (!analytics) {
    return (
      <div className="text-center py-12">
        <h2 className="text-2xl font-bold mb-2">Analytics not available</h2>
        <p className="text-gray-600 dark:text-gray-400">
          Unable to load analytics for this video.
        </p>
      </div>
    )
  }

  const COLORS = ['#8884d8', '#82ca9d', '#ffc658', '#ff7300', '#00ff7f']

  return (
    <div className="max-w-7xl mx-auto space-y-6">
      {/* Header */}
      <div className="flex items-start justify-between">
        <div className="flex gap-4">
          <img
            src={analytics.video.thumbnail_url}
            alt={analytics.video.title}
            className="w-32 h-20 object-cover rounded-lg border"
          />
          <div>
            <h1 className="text-3xl font-bold">{analytics.video.title}</h1>
            <p className="text-gray-600 dark:text-gray-400 mt-1">
              Video Analytics
            </p>
            <div className="flex items-center gap-4 mt-2">
              <Badge variant="outline">
                <Calendar className="w-3 h-3 mr-1" />
                {new Date(analytics.video.uploaded_at).toLocaleDateString()}
              </Badge>
              <Badge variant="outline">
                <Clock className="w-3 h-3 mr-1" />
                {formatDuration(analytics.video.duration)}
              </Badge>
              <Badge variant={analytics.video.status === 'published' ? 'default' : 'secondary'}>
                {analytics.video.status}
              </Badge>
            </div>
          </div>
        </div>

        <div className="flex gap-2">
          <Button variant="outline" onClick={() => exportData('csv')}>
            <Download className="w-4 h-4 mr-2" />
            Export CSV
          </Button>
          <Button variant="outline" onClick={() => exportData('json')}>
            <Download className="w-4 h-4 mr-2" />
            Export JSON
          </Button>
        </div>
      </div>

      {/* Key Metrics */}
      <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
        <Card>
          <CardContent className="pt-6">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm font-medium text-gray-600 dark:text-gray-400">Total Views</p>
                <p className="text-2xl font-bold">{formatNumber(analytics.metrics.total_views)}</p>
              </div>
              <Eye className="w-8 h-8 text-blue-500" />
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardContent className="pt-6">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm font-medium text-gray-600 dark:text-gray-400">Watch Time</p>
                <p className="text-2xl font-bold">{formatDuration(analytics.metrics.total_watch_time)}</p>
              </div>
              <Clock className="w-8 h-8 text-green-500" />
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardContent className="pt-6">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm font-medium text-gray-600 dark:text-gray-400">Completion Rate</p>
                <p className="text-2xl font-bold">{analytics.metrics.completion_rate}%</p>
              </div>
              <TrendingUp className="w-8 h-8 text-purple-500" />
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardContent className="pt-6">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm font-medium text-gray-600 dark:text-gray-400">Engagement</p>
                <p className="text-2xl font-bold">{analytics.metrics.like_rate}%</p>
              </div>
              <ThumbsUp className="w-8 h-8 text-orange-500" />
            </div>
          </CardContent>
        </Card>
      </div>

      {/* Detailed Analytics */}
      <Tabs defaultValue="retention" className="w-full">
        <TabsList className="grid w-full grid-cols-5">
          <TabsTrigger value="retention">Retention</TabsTrigger>
          <TabsTrigger value="heatmap">Interaction Heatmap</TabsTrigger>
          <TabsTrigger value="demographics">Demographics</TabsTrigger>
          <TabsTrigger value="performance">Performance</TabsTrigger>
          <TabsTrigger value="moments">Top Moments</TabsTrigger>
        </TabsList>

        <TabsContent value="retention" className="space-y-4">
          <Card>
            <CardHeader>
              <CardTitle>Audience Retention</CardTitle>
              <CardDescription>
                How much of your video audience watches over time
              </CardDescription>
            </CardHeader>
            <CardContent>
              <ResponsiveContainer width="100%" height={400}>
                <AreaChart data={analytics.retention_data}>
                  <CartesianGrid strokeDasharray="3 3" />
                  <XAxis 
                    dataKey="timestamp" 
                    tickFormatter={(value) => formatDuration(value)}
                  />
                  <YAxis domain={[0, 100]} />
                  <Tooltip 
                    formatter={(value, name) => [
                      name === 'percentage' ? `${value}%` : value,
                      name === 'percentage' ? 'Retention' : 'Viewers'
                    ]}
                    labelFormatter={(label) => `Time: ${formatDuration(label)}`}
                  />
                  <Area 
                    type="monotone" 
                    dataKey="percentage" 
                    stroke="#8884d8" 
                    fill="#8884d8" 
                    fillOpacity={0.3}
                  />
                </AreaChart>
              </ResponsiveContainer>
              
              <div className="mt-4 p-4 bg-gray-50 dark:bg-gray-800 rounded-lg">
                <h4 className="font-medium mb-2">Key Insights</h4>
                <ul className="text-sm space-y-1 text-gray-600 dark:text-gray-400">
                  <li>• Average view duration: {formatDuration(analytics.metrics.average_view_duration)}</li>
                  <li>• {analytics.metrics.completion_rate}% of viewers watched to the end</li>
                  <li>• Highest retention at the beginning: {Math.max(...analytics.retention_data.map(d => d.percentage)).toFixed(1)}%</li>
                </ul>
              </div>
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="heatmap" className="space-y-4">
          <Card>
            <CardHeader>
              <CardTitle>Interaction Heatmap</CardTitle>
              <CardDescription>
                See where viewers interact, rewatch, or skip content
              </CardDescription>
            </CardHeader>
            <CardContent>
              <ResponsiveContainer width="100%" height={400}>
                <BarChart data={analytics.heatmap_data}>
                  <CartesianGrid strokeDasharray="3 3" />
                  <XAxis 
                    dataKey="timestamp" 
                    tickFormatter={(value) => formatDuration(value)}
                  />
                  <YAxis />
                  <Tooltip 
                    labelFormatter={(label) => `Time: ${formatDuration(label)}`}
                  />
                  <Bar dataKey="interactions" fill="#8884d8" name="Interactions" />
                  <Bar dataKey="rewatches" fill="#82ca9d" name="Rewatches" />
                  <Bar dataKey="skips" fill="#ffc658" name="Skips" />
                </BarChart>
              </ResponsiveContainer>
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="demographics" className="space-y-4">
          <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
            <Card>
              <CardHeader>
                <CardTitle>Age Groups</CardTitle>
              </CardHeader>
              <CardContent>
                <ResponsiveContainer width="100%" height={300}>
                  <PieChart>
                    <Pie
                      data={analytics.demographics.age_groups}
                      cx="50%"
                      cy="50%"
                      labelLine={false}
                      label={({ group, percent }) => `${group} (${(percent * 100).toFixed(0)}%)`}
                      outerRadius={80}
                      fill="#8884d8"
                      dataKey="count"
                    >
                      {analytics.demographics.age_groups.map((entry, index) => (
                        <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />
                      ))}
                    </Pie>
                    <Tooltip />
                  </PieChart>
                </ResponsiveContainer>
              </CardContent>
            </Card>

            <Card>
              <CardHeader>
                <CardTitle>Top Countries</CardTitle>
              </CardHeader>
              <CardContent>
                <div className="space-y-3">
                  {analytics.demographics.geographic.map((country, index) => (
                    <div key={country.country} className="flex items-center justify-between">
                      <div className="flex items-center gap-3">
                        <span className="text-sm font-medium w-6">{index + 1}</span>
                        <span>{country.country}</span>
                      </div>
                      <div className="flex items-center gap-3">
                        <Progress 
                          value={(country.viewers / analytics.demographics.geographic[0]?.viewers) * 100} 
                          className="w-24 h-2"
                        />
                        <span className="text-sm font-medium w-8 text-right">
                          {country.viewers}
                        </span>
                      </div>
                    </div>
                  ))}
                </div>
              </CardContent>
            </Card>
          </div>
        </TabsContent>

        <TabsContent value="performance" className="space-y-4">
          <Card>
            <CardHeader>
              <CardTitle>Performance Over Time</CardTitle>
              <CardDescription>
                Track how your video performs day by day
              </CardDescription>
            </CardHeader>
            <CardContent>
              <ResponsiveContainer width="100%" height={400}>
                <LineChart data={analytics.performance_over_time}>
                  <CartesianGrid strokeDasharray="3 3" />
                  <XAxis dataKey="date" />
                  <YAxis yAxisId="left" />
                  <YAxis yAxisId="right" orientation="right" />
                  <Tooltip />
                  <Line 
                    yAxisId="left"
                    type="monotone" 
                    dataKey="views" 
                    stroke="#8884d8" 
                    name="Views"
                  />
                  <Line 
                    yAxisId="right"
                    type="monotone" 
                    dataKey="engagement" 
                    stroke="#82ca9d" 
                    name="Engagement %"
                  />
                </LineChart>
              </ResponsiveContainer>
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="moments" className="space-y-4">
          <Card>
            <CardHeader>
              <CardTitle>Top Moments</CardTitle>
              <CardDescription>
                Most engaging parts of your video
              </CardDescription>
            </CardHeader>
            <CardContent>
              <div className="space-y-4">
                {analytics.top_moments.map((moment, index) => (
                  <div key={index} className="flex items-center gap-4 p-4 border rounded-lg">
                    <div className="text-center">
                      <div className="text-lg font-bold text-purple-600">#{index + 1}</div>
                      <div className="text-xs text-gray-500">
                        {formatDuration(moment.timestamp)}
                      </div>
                    </div>
                    
                    <div className="flex-1">
                      <p className="font-medium">{moment.description}</p>
                      <div className="flex items-center gap-2 mt-1">
                        <Progress value={moment.engagement_score} className="flex-1 h-2" />
                        <span className="text-sm text-gray-600">
                          {moment.engagement_score}% engagement
                        </span>
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            </CardContent>
          </Card>
        </TabsContent>
      </Tabs>
    </div>
  )
}
